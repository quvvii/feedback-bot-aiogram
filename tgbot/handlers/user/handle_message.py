from aiogram import types, Router, Bot, F
from aiogram.utils.markdown import html_decoration as hd

from tgbot.services.database.message_relations import MessageRelationsService
from tgbot.services.database.user_service import UserService
from tgbot.services.utils import time_ago

from config import config

import logging


logger = logging.getLogger(__name__)
router = Router()


@router.message(~F.text.startswith("/"))
async def forward_user_message_to_admin(
    msg: types.Message,
    bot: Bot,
    mr: MessageRelationsService,
    us: UserService
):
    user = msg.from_user
    db_user = await us.get_user_by_id(user.id)

    username = f"üìõ Username: @{user.username}\n" if user.username else ""

    user_info = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.mention_html()}\n"
        f"üÜî ID: {hd.code(user.id)}\n"
        f"{username}"
        f"‚è∞ –°–æ–∑–¥–∞–Ω: {hd.quote(time_ago(db_user.created_at))}" if db_user else ""
    )

    info_msg = await bot.send_message(config.ADMIN_ID, user_info)

    try:
        if msg.video_note:
            sent_msg = await bot.send_video_note(
                chat_id=config.ADMIN_ID,
                video_note=msg.video_note.file_id
            )
        elif msg.voice:
            sent_msg = await bot.send_voice(
                chat_id=config.ADMIN_ID,
                voice=msg.voice.file_id,
                caption=msg.caption
            )
        else:
            sent_msg = await msg.send_copy(config.ADMIN_ID)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –∞–¥–º–∏–Ω—É
        await mr.create_relation(
            message_id=sent_msg.message_id,
            user_id=user.id
        )

        # –ò –µ—â–µ –æ–¥–Ω–æ (–∏–Ω—Ñ–æ —é–∑–µ—Ä–∞) –µ—Å–ª–∏ —Ö–æ—Ç–∏–º —Ç–∞–∫ –∂–µ –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–µ–≥–æ
        # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –±—É–¥–µ—Ç –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ —Å–≤—è–∑–µ–π –≤ –±–¥)
        await mr.create_relation(
            message_id=info_msg.message_id,
            user_id=user.id
        )

        await msg.reply("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")

    except Exception as e:
        logger.error(f"Forward error: {e}")
        await msg.reply("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
